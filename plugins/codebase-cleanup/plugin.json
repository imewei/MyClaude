{
  "name": "codebase-cleanup",
  "displayName": "Codebase Cleanup",
  "description": "Codebase cleanup and technical debt reduction expertise with AI-powered code analysis, systematic refactoring, TDD, and quality engineering. v1.0.1 features enhanced agents with triggering criteria, chain-of-thought reasoning, Constitutional AI principles, and comprehensive cleanup examples.",
  "changelog": "v1.0.1: Major prompt engineering improvements for both agents with triggering criteria (20 USE cases each, 7-8 anti-patterns with clear delegation), 6-step chain-of-thought reasoning frameworks (60 guiding questions per agent), 5 Constitutional AI principles (50 self-check questions per agent), comprehensive few-shot examples (code-reviewer: legacy Python cleanup with 450+ lines; test-automator: TDD REST API with 400+ lines). Expected: 50-70% better code quality, 60% faster review/development, 70% more thorough issue detection and testing.",
  "version": "1.0.1",
  "keywords": [
    "cleanup",
    "refactoring",
    "dead-code",
    "technical-debt",
    "code-organization",
    "dependency-management",
    "import-cleanup",
    "code-quality",
    "maintenance",
    "code-pruning",
    "legacy-cleanup",
    "tdd",
    "test-automation",
    "code-review",
    "ai-powered",
    "quality-engineering"
  ],
  "category": "development",
  "author": {
    "name": "Wei Chen",
    "url": "https://myclaude.readthedocs.io/en/latest/"
  },
  "license": "MIT",
  "agents": [
    {
      "id": "code-reviewer",
      "file": "agents/code-reviewer.md",
      "name": "Code Reviewer",
      "description": "Elite code review expert specializing in modern AI-powered code analysis, security vulnerabilities, performance optimization, and production reliability",
      "status": "active",
      "version": "1.0.1",
      "maturity": "91%",
      "improvements": "Added triggering criteria with 20 USE cases and 8 anti-patterns with delegation decision tree (code-reviewer vs. test-automator vs. security-auditor vs. performance-optimizer), 6-step chain-of-thought reasoning framework (Code Analysis & Discovery → Issue Prioritization → Cleanup Strategy Design → Implementation & Execution → Testing & Validation → Documentation & Review) with 60 guiding questions (10 per step), 5 Constitutional AI principles (Safety First, Quality Over Speed, Test-Driven Cleanup, Incremental Improvement, Knowledge Sharing) with 50 self-check questions (10 per principle), comprehensive 450-line legacy Python codebase cleanup example with before/after code, 40+ pytest test cases with 85% coverage, and self-critique (91% maturity score). Growth: 157 → 1,302 lines (+1,145 lines, 8.3x). Expected: 50-70% better code quality, 60% faster reviews, 70% more thorough issue detection."
    },
    {
      "id": "test-automator",
      "file": "agents/test-automator.md",
      "name": "Test Automator",
      "description": "Master AI-powered test automation with modern frameworks, self-healing tests, comprehensive quality engineering, and TDD discipline",
      "status": "active",
      "version": "1.0.1",
      "maturity": "91%",
      "improvements": "Added triggering criteria with 20 USE cases and 7 anti-patterns with delegation decision tree (test-automator vs. qa-engineer vs. code-reviewer vs. performance-tester), 6-step chain-of-thought reasoning framework (Test Strategy Design → Test Environment Setup → Test Implementation → Test Execution & Monitoring → Test Maintenance & Optimization → Quality Metrics & Reporting) with 60 guiding questions (10 per step), 5 Constitutional AI principles (Test Reliability First, Fast Feedback Loops, Comprehensive Coverage, Maintainable Test Code, TDD Discipline) with 50 self-check questions (10 per principle), comprehensive 400-line TDD REST API example with red-green-refactor cycle, Jest tests, GitHub Actions CI/CD, 92% coverage, and self-critique (91% maturity score). Growth: 204 → 1,326 lines (+1,122 lines, 6.5x). Expected: 50-70% better test quality, 60% faster development with TDD, 70% earlier bug detection."
    }
  ],
  "commands": [
    {
      "id": "deps-audit",
      "file": "commands/deps-audit.md",
      "name": "/deps-audit",
      "description": "Audit dependencies for unused packages, security issues, and optimization opportunities",
      "status": "active"
    },
    {
      "id": "fix-imports",
      "file": "commands/fix-imports.md",
      "name": "/fix-imports",
      "description": "Fix and organize import statements across the codebase",
      "status": "active"
    },
    {
      "id": "refactor-clean",
      "file": "commands/refactor-clean.md",
      "name": "/refactor-clean",
      "description": "Clean and refactor code for better organization and maintainability",
      "status": "active"
    },
    {
      "id": "tech-debt",
      "file": "commands/tech-debt.md",
      "name": "/tech-debt",
      "description": "Identify and prioritize technical debt for systematic reduction",
      "status": "active"
    }
  ],
  "skills": []
}
