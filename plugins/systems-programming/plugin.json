{
  "name": "systems-programming",
  "version": "1.0.1",
  "description": "Production-grade systems programming with C, C++, Rust, and Go. Features systematic development processes, quality assurance checkpoints, comprehensive examples, and battle-tested patterns for memory safety, concurrency, and performance.",
  "author": {
    "name": "Wei Chen",
    "url": "https://myclaude.readthedocs.io/en/latest/"
  },
  "homepage": "https://github.com/imewei/MyClaude",
  "repository": "https://github.com/imewei/MyClaude",
  "license": "MIT",
  "keywords": [
    "systems-programming",
    "c",
    "cpp",
    "rust",
    "golang",
    "performance",
    "memory-management",
    "concurrency",
    "profiling",
    "optimization",
    "memory-safety",
    "type-safety",
    "async-programming"
  ],
  "category": "development",
  "commands": [
    {
      "name": "/rust-project",
      "description": "Scaffold production-ready Rust projects with proper structure, cargo tooling, and testing",
      "status": "active"
    },
    {
      "name": "/c-project",
      "description": "Scaffold production-ready C projects with Makefile/CMake, testing, and memory safety tools",
      "status": "active"
    },
    {
      "name": "/profile-performance",
      "description": "Comprehensive performance profiling workflow using perf, valgrind, and hardware counters",
      "status": "active"
    }
  ],
  "agents": [
    {
      "name": "rust-pro",
      "description": "Master Rust 1.75+ with systematic development process, ownership patterns, async Tokio, type safety, and zero-cost abstractions. Includes 8-step workflow, quality checkpoints, and production-ready examples with graceful shutdown.",
      "status": "active",
      "capabilities": [
        "8-step systematic development workflow",
        "Ownership and borrowing patterns",
        "Async/await with Tokio runtime",
        "Error handling with Result and thiserror",
        "16 strategic ambiguity questions",
        "Thread-safe rate limiter example",
        "Production web service with graceful shutdown"
      ]
    },
    {
      "name": "c-pro",
      "description": "Master C programming with systematic development process, memory safety validation, POSIX APIs, and error handling patterns. Includes 8-step workflow, Valgrind/AddressSanitizer integration, and thread-safe memory pool examples.",
      "status": "active",
      "capabilities": [
        "8-step systematic development workflow",
        "Memory management with pools and arenas",
        "POSIX API expertise",
        "Error handling with goto cleanup pattern",
        "16 strategic ambiguity questions",
        "Thread-safe memory pool example",
        "Valgrind and AddressSanitizer validation"
      ]
    },
    {
      "name": "cpp-pro",
      "description": "Master modern C++11/14/17/20/23 with systematic development process, RAII patterns, template metaprogramming, and move semantics. Includes 8-step workflow, compile-time computation, and LRU cache with shared_mutex.",
      "status": "active",
      "capabilities": [
        "8-step systematic development workflow",
        "RAII and Rule of Zero/Three/Five",
        "Modern C++20/23 features with concepts",
        "Template metaprogramming and SFINAE",
        "16 strategic ambiguity questions",
        "Thread-safe LRU cache example",
        "Compile-time string parser with consteval"
      ]
    },
    {
      "name": "golang-pro",
      "description": "Master Go 1.21+ with systematic development process, goroutines, channels, context patterns, and observability. Includes 8-step workflow, graceful shutdown patterns, and HTTP server with Prometheus metrics.",
      "status": "active",
      "capabilities": [
        "8-step systematic development workflow",
        "Goroutines and channel patterns",
        "Context for cancellation and timeouts",
        "Structured logging with slog",
        "16 strategic ambiguity questions",
        "Worker pool with graceful shutdown",
        "HTTP server with Prometheus and tracing"
      ]
    }
  ],
  "skills": [
    {
      "name": "systems-programming-patterns",
      "description": "Battle-tested patterns for memory management, concurrency, performance optimization, and debugging across C/C++/Rust/Go. Use when implementing memory allocators, lock-free data structures, SIMD vectorization, or optimizing cache performance with profiling tools.",
      "capabilities": [
        "Memory management patterns (pools, arenas, RAII)",
        "Concurrency patterns (lock-free, work-stealing)",
        "Performance optimization (SIMD, cache-friendly layouts)",
        "Debugging with Valgrind, perf, and sanitizers",
        "Zero-copy algorithms and atomic operations",
        "20+ specific use cases with file patterns"
      ]
    }
  ]
}
