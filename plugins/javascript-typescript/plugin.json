{
  "name": "javascript-typescript",
  "version": "1.0.1",
  "description": "Comprehensive JavaScript and TypeScript development skills including modern patterns, testing, backend development, advanced types, and monorepo management",
  "author": "Wei Chen",
  "license": "MIT",
  "keywords": ["javascript", "typescript", "nodejs", "testing", "monorepo", "modern-js"],
  "agents": [
    {
      "name": "javascript-pro",
      "description": "Master modern JavaScript (ES6+, ES2024) with 6-step decision framework (Problem Analysis, Feature Selection, Async Patterns, Performance, Error Handling, Production Readiness). Implements 4 Constitutional AI principles (Code Quality 90%, Performance 85%, Compatibility 90%, Security 88%). Comprehensive examples: Callback Hell → Async/Await (60% reduction, +200% performance), Monolithic → Modular ESM (85% bundle reduction, 76% load time improvement). Expert in Node.js 20+, async/await, promises, event loop, module systems, testing (Jest/Vitest), and production optimization.",
      "status": "active"
    },
    {
      "name": "typescript-pro",
      "description": "Master TypeScript with advanced type systems (generics, conditional types, mapped types) and 6-step framework (Project Analysis, Type System Design, Architecture Patterns, Type Safety, Performance, Integration). Implements 4 Constitutional AI principles (Type Safety 95%, Code Quality 90%, Performance 88%, Standards 92%). Comprehensive examples: JavaScript → Strict TypeScript (95% error reduction, 99% type coverage), Simple → Advanced Generics (70% duplication reduction, 85% safety improvement). Expert in TypeScript 5.3+, branded types, runtime validation (Zod), React/Node integration, strict mode, and enterprise patterns.",
      "status": "active"
    }
  ],
  "skills": [
    {
      "name": "modern-javascript-patterns",
      "description": "Master modern JavaScript (ES6/ES2015 through ES2024) features including async/await, destructuring, spread operators, arrow functions, promises, modules, iterators, generators, optional chaining, nullish coalescing, and functional programming patterns. Use for refactoring legacy code, implementing modern patterns, async operations, and optimizing JavaScript applications."
    },
    {
      "name": "typescript-advanced-types",
      "description": "Master TypeScript's advanced type system including generics, conditional types, mapped types, template literal types, utility types (Partial, Required, Pick, Omit, Record), type inference with infer keyword, branded types, discriminated unions, and recursive types. Use for type-safe applications, API clients, form validation, and state management."
    },
    {
      "name": "javascript-testing-patterns",
      "description": "Implement comprehensive testing strategies using Jest, Vitest, and Testing Library for unit tests, integration tests, and end-to-end testing with advanced mocking, fixtures, and TDD/BDD workflows. Use for test files (*.test.ts, *.spec.ts), test infrastructure, component testing, API testing, and CI/CD integration."
    },
    {
      "name": "nodejs-backend-patterns",
      "description": "Build production-ready Node.js backend services with Express.js, Fastify, NestJS, and Koa implementing middleware patterns, error handling, authentication (JWT, OAuth2, session, RBAC), database integration (PostgreSQL, MongoDB, Redis), API design, GraphQL, WebSockets, background jobs, and observability."
    },
    {
      "name": "monorepo-management",
      "description": "Master monorepo management with Turborepo, Nx, pnpm workspaces, Yarn workspaces, and npm workspaces to build efficient, scalable multi-package repositories with optimized builds, intelligent caching, shared dependencies, code sharing patterns, CI/CD for monorepos, and versioning strategies with changesets."
    }
  ],
  "tags": [
    "javascript",
    "typescript",
    "nodejs",
    "testing",
    "monorepo",
    "turborepo",
    "nx",
    "pnpm",
    "jest",
    "vitest",
    "express",
    "fastify"
  ]
}
