name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install radon xenon mccabe pylint-exit

      - name: Calculate complexity metrics
        run: |
          radon cc claude_commands/ -a -nb -j > complexity.json
          radon mi claude_commands/ -j > maintainability.json
          radon raw claude_commands/ -j > raw_metrics.json

      - name: Check cyclomatic complexity
        run: |
          xenon --max-absolute B --max-modules B --max-average A claude_commands/ || true

      - name: Run comprehensive quality checks
        run: |
          python cicd/quality/quality_gate.py \
            --complexity complexity.json \
            --maintainability maintainability.json \
            --output quality_report.json

      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        with:
          name: quality-reports
          path: |
            complexity.json
            maintainability.json
            raw_metrics.json
            quality_report.json
          retention-days: 90

  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydocstyle interrogate darglint

      - name: Check docstring coverage
        run: |
          interrogate -vv claude_commands/ --fail-under=80

      - name: Check docstring style
        run: |
          pydocstyle claude_commands/ --convention=google

      - name: Validate docstring arguments
        run: |
          darglint -v 2 claude_commands/ || true

      - name: Run documentation gate
        run: |
          python cicd/quality/documentation_gate.py \
            --threshold 80 \
            --style google

  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Validate example scripts
        run: |
          for example in examples/*.py; do
            echo "Validating $example"
            python -m py_compile "$example"
          done

      - name: Run example tests
        run: |
          pytest examples/ -v --doctest-modules

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit pipdeptree

      - name: Audit dependencies
        run: |
          pip-audit --desc --output pip-audit-report.json || true
          pip-audit --desc

      - name: Generate dependency tree
        run: |
          pipdeptree --json > dependency-tree.json
          pipdeptree

      - name: Check for outdated packages
        run: |
          pip list --outdated --format=json > outdated-packages.json
          pip list --outdated

      - name: Upload audit reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-reports
          path: |
            pip-audit-report.json
            dependency-tree.json
            outdated-packages.json
          retention-days: 30

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pip-licenses

      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=markdown --output-file=LICENSES.md

      - name: Validate license compatibility
        run: |
          python -c "
          import json
          with open('licenses.json') as f:
              licenses = json.load(f)

          forbidden = ['GPL', 'AGPL', 'LGPL']
          issues = []

          for pkg in licenses:
              lic = pkg.get('License', 'UNKNOWN')
              if any(f in lic for f in forbidden):
                  issues.append(f\"{pkg['Name']}: {lic}\")

          if issues:
              print('License compliance issues:')
              for issue in issues:
                  print(f'  - {issue}')
              exit(1)
          else:
              print('All licenses are compatible')
          "

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: |
            licenses.json
            LICENSES.md
          retention-days: 90

  link-checker:
    name: Check Documentation Links
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 markdown

      - name: Check links in documentation
        run: |
          python cicd/docs/link_checker.py --fail-on-error

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [code-quality, documentation-quality, validate-examples, dependency-audit, license-check]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate quality summary
        run: |
          echo "# Quality Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation Quality: ${{ needs.documentation-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Example Validation: ${{ needs.validate-examples.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- License Check: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All quality checks completed!"