# Pre-commit hooks configuration
# Install: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Code formatting
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Linting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.15
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  - repo: https://github.com/PyCQA/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports, --strict]

  # Security
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        args: [-r, -ll, -i]
        exclude: tests/

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: package.lock.json

  # Documentation
  - repo: https://github.com/PyCQA/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        exclude: tests/

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: debug-statements
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: name-tests-test
        args: [--pytest-test-first]

  # Commit message checks
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [--strict]

  # Python upgrade syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py310-plus]

  # Markdown
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.17
    hooks:
      - id: mdformat
        additional_dependencies:
          - mdformat-gfm
          - mdformat-black

  # YAML
  - repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks
    rev: v2.12.0
    hooks:
      - id: pretty-format-yaml
        args: [--autofix, --indent, '2']

  # Dockerfile
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker

  # License headers
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        files: \.py$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - "#"

# Local hooks
  - repo: local
    hooks:
      - id: pytest-check
        name: pytest-check
        entry: pytest
        language: system
        pass_filenames: false
        always_run: true
        args: [tests/unit/, -v, --tb=short]

      - id: coverage-check
        name: coverage-check
        entry: bash
        language: system
        pass_filenames: false
        always_run: true
        args:
          - -c
          - |
            pytest tests/ --cov=claude_commands --cov-fail-under=90

      - id: complexity-check
        name: complexity-check
        entry: python
        language: system
        pass_filenames: false
        always_run: true
        args:
          - -c
          - |
            import sys
            from radon.complexity import cc_visit
            from radon.visitors import ComplexityVisitor
            import pathlib

            max_complexity = 10
            failed = False

            for path in pathlib.Path('claude_commands').rglob('*.py'):
                with open(path) as f:
                    results = cc_visit(f.read())
                    for result in results:
                        if result.complexity > max_complexity:
                            print(f"{path}:{result.lineno} {result.name} is too complex ({result.complexity})")
                            failed = True

            if failed:
                sys.exit(1)

      - id: import-check
        name: import-check
        entry: python
        language: system
        pass_filenames: false
        always_run: true
        args:
          - -c
          - |
            import sys
            import pathlib
            for path in pathlib.Path('claude_commands').rglob('*.py'):
                with open(path) as f:
                    try:
                        compile(f.read(), path, 'exec')
                    except SyntaxError as e:
                        print(f"Syntax error in {path}: {e}")
                        sys.exit(1)

# Configuration
default_language_version:
  python: python3.11

exclude: |
  (?x)^(
    \.git/|
    \.tox/|
    \.venv/|
    venv/|
    build/|
    dist/|
    .*\.egg-info/|
    __pycache__/|
    \.pytest_cache/|
    \.mypy_cache/|
    \.coverage|
    htmlcov/
  )

fail_fast: false
minimum_pre_commit_version: "3.0.0"