[tox]
# Tox Configuration for Multi-Environment Testing

# Python environments to test
envlist =
    py39
    py310
    py311
    py312
    lint
    type
    security
    coverage

# Skip missing interpreters
skip_missing_interpreters = True

# Minimum tox version
minversion = 4.0

[testenv]
# Install test dependencies
deps =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-xdist>=3.3.0
    pytest-timeout>=2.1.0
    pytest-mock>=3.11.0
    pytest-asyncio>=0.21.0
    pytest-benchmark>=4.0.0

# Set environment variables
setenv =
    PYTHONPATH = {toxinidir}/../..
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}

# Run commands
commands =
    pytest {posargs:tests}

# Pass environment variables
passenv =
    HOME
    USER
    CI
    GITHUB_*

[testenv:py39]
basepython = python3.9
description = Run tests with Python 3.9

[testenv:py310]
basepython = python3.10
description = Run tests with Python 3.10

[testenv:py311]
basepython = python3.11
description = Run tests with Python 3.11

[testenv:py312]
basepython = python3.12
description = Run tests with Python 3.12

[testenv:lint]
# Linting environment
basepython = python3.11
description = Run linters (flake8, black, isort)
deps =
    flake8>=6.0.0
    black>=23.0.0
    isort>=5.12.0
    pylint>=2.17.0
commands =
    flake8 executors tests
    black --check executors tests
    isort --check-only executors tests
    pylint executors

[testenv:type]
# Type checking environment
basepython = python3.11
description = Run type checking with mypy
deps =
    mypy>=1.4.0
    types-setuptools
commands =
    mypy executors tests --strict

[testenv:security]
# Security scanning environment
basepython = python3.11
description = Run security checks (bandit, safety)
deps =
    bandit>=1.7.5
    safety>=2.3.0
commands =
    bandit -r executors -ll
    safety check

[testenv:coverage]
# Coverage reporting environment
basepython = python3.11
description = Generate coverage report
deps =
    {[testenv]deps}
    coverage[toml]>=7.2.0
commands =
    coverage erase
    pytest --cov --cov-report=term-missing --cov-report=html --cov-report=xml
    coverage report --fail-under=90

[testenv:fast]
# Fast test environment (unit tests only)
basepython = python3.11
description = Run fast unit tests only
commands =
    pytest -m "fast or unit" {posargs:tests/unit}

[testenv:integration]
# Integration test environment
basepython = python3.11
description = Run integration tests
commands =
    pytest -m integration {posargs:tests/integration}

[testenv:workflow]
# Workflow test environment
basepython = python3.11
description = Run workflow tests
commands =
    pytest -m workflow {posargs:tests/workflows}

[testenv:performance]
# Performance test environment
basepython = python3.11
description = Run performance benchmarks
deps =
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    memory-profiler>=0.61.0
commands =
    pytest tests/performance --benchmark-only

[testenv:clean]
# Cleanup environment
description = Remove generated files and cache
deps =
skip_install = True
commands =
    python -c 'import shutil; shutil.rmtree("htmlcov", ignore_errors=True)'
    python -c 'import shutil; shutil.rmtree(".pytest_cache", ignore_errors=True)'
    python -c 'import shutil; shutil.rmtree(".tox", ignore_errors=True)'
    python -c 'import shutil; shutil.rmtree("__pycache__", ignore_errors=True)'
    python -c 'import pathlib, glob; [f.unlink() for f in pathlib.Path(".").rglob("*.pyc")]'
    python -c 'import pathlib; pathlib.Path(".coverage").unlink(missing_ok=True)'
    python -c 'import pathlib; pathlib.Path("coverage.xml").unlink(missing_ok=True)'

[flake8]
# Flake8 configuration
max-line-length = 100
max-complexity = 15
exclude =
    .git,
    __pycache__,
    .tox,
    venv,
    env,
    .venv,
    build,
    dist
ignore =
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator

[isort]
# isort configuration
profile = black
line_length = 100
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
use_parentheses = True
ensure_newline_before_comments = True

[mypy]
# mypy configuration
python_version = 3.11
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
strict_equality = True