[pytest]
# Pytest Configuration for Command Executor Framework Tests

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Directories to search for tests
testpaths =
    integration
    unit
    workflows
    performance

# Minimal output by default, verbose on -v
addopts =
    --strict-markers
    --tb=short
    --disable-warnings
    -ra
    --cov=executors
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-branch
    --durations=10

# Coverage settings
[coverage:run]
source = executors
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    if TYPE_CHECKING:
    if __name__ == .__main__.:
    raise AssertionError
    raise NotImplementedError
    @abstractmethod
    @abc.abstractmethod

# Test markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for full workflows
    workflow: Real-world workflow tests
    performance: Performance and benchmark tests
    slow: Tests that take significant time
    fast: Fast tests that can run frequently
    cache: Tests for caching system
    agents: Tests for agent orchestration
    safety: Tests for safety features (backup, rollback)
    validation: Tests for validation pipeline
    framework: Tests for core framework
    commands: Tests for specific command executors
    mock: Tests using mocked dependencies
    real: Tests requiring real dependencies

# Timeout for tests (in seconds)
timeout = 300
timeout_method = thread

# Parallel execution
[pytest-xdist]
looponfailroots = executors tests

# Test fixtures
[pytest-fixtures]
fixtures_dir = fixtures

# Console output options
console_output_style = progress