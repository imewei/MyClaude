# Validation Scenarios for Claude Code Command Executor Framework
# Comprehensive test scenarios that simulate real-world usage

validation_scenarios:
  # 1. Code Quality Improvement Scenario
  code_quality_improvement:
    name: "Code Quality Enhancement"
    description: "Run check-quality → auto-fix → validate improvement"
    priority: critical
    estimated_duration_minutes: 15
    steps:
      - action: collect_baseline
        command: check-code-quality
        options: [--language=auto, --analysis=basic]

      - action: auto_fix
        command: check-code-quality
        options: [--auto-fix, --language=auto]

      - action: validate_improvement
        command: check-code-quality
        options: [--language=auto, --analysis=basic]

      - action: measure_improvement
        metrics: [quality_score, issues_fixed, complexity_reduced]

    success_criteria:
      quality_improvement_percentage: ">= 20"
      no_regressions: true
      issues_fixed: "> 0"

  # 2. Performance Optimization Scenario
  performance_optimization:
    name: "Performance Optimization Sprint"
    description: "Identify and optimize performance bottlenecks"
    priority: critical
    estimated_duration_minutes: 20
    steps:
      - action: profile_baseline
        command: optimize
        options: [--language=auto, --category=all]

      - action: implement_optimizations
        command: optimize
        options: [--implement, --language=auto, --category=all]

      - action: measure_improvement
        command: run-all-tests
        options: [--benchmark, --profile]

    success_criteria:
      performance_improvement: ">= 2x"
      no_test_failures: true
      memory_reduction: ">= 10"

  # 3. Test Generation and Coverage
  test_generation:
    name: "Test Suite Generation"
    description: "Generate comprehensive tests and achieve high coverage"
    priority: critical
    estimated_duration_minutes: 25
    steps:
      - action: measure_baseline_coverage
        command: run-all-tests
        options: [--coverage]

      - action: generate_unit_tests
        command: generate-tests
        options: [--type=unit, --framework=auto]

      - action: generate_integration_tests
        command: generate-tests
        options: [--type=integration, --framework=auto]

      - action: run_all_tests
        command: run-all-tests
        options: [--coverage, --scope=all]

    success_criteria:
      coverage_percentage: ">= 80"
      all_tests_pass: true
      new_tests_generated: "> 10"

  # 4. Documentation Generation
  documentation_generation:
    name: "Comprehensive Documentation"
    description: "Generate complete project documentation"
    priority: high
    estimated_duration_minutes: 15
    steps:
      - action: generate_api_docs
        command: update-docs
        options: [--type=api, --format=markdown]

      - action: generate_readme
        command: update-docs
        options: [--type=readme, --format=markdown]

      - action: validate_links
        command: update-docs
        options: [--type=all]

    success_criteria:
      documentation_coverage: ">= 70"
      no_broken_links: true
      api_docs_complete: true

  # 5. Safe Refactoring
  safe_refactoring:
    name: "Safe Code Refactoring"
    description: "Refactor code with comprehensive validation"
    priority: high
    estimated_duration_minutes: 20
    steps:
      - action: run_baseline_tests
        command: run-all-tests
        options: [--scope=all]

      - action: refactor_code
        command: refactor-clean
        options: [--scope=project, --patterns=modern, --implement]

      - action: validate_refactoring
        command: run-all-tests
        options: [--scope=all, --coverage]

      - action: check_quality
        command: check-code-quality
        options: [--language=auto, --analysis=basic]

    success_criteria:
      all_tests_pass: true
      no_functionality_broken: true
      code_quality_improved: true

  # 6. Codebase Cleanup
  codebase_cleanup:
    name: "Comprehensive Codebase Cleanup"
    description: "Remove dead code, unused imports, and duplicates"
    priority: high
    estimated_duration_minutes: 15
    steps:
      - action: analyze_codebase
        command: clean-codebase
        options: [--dry-run, --analysis=comprehensive]

      - action: remove_unused_imports
        command: clean-codebase
        options: [--imports, --ast-deep]

      - action: remove_dead_code
        command: clean-codebase
        options: [--dead-code, --ast-deep]

      - action: remove_duplicates
        command: clean-codebase
        options: [--duplicates]

      - action: validate_cleanup
        command: run-all-tests
        options: [--scope=all]

    success_criteria:
      tests_still_pass: true
      lines_reduced: "> 0"
      no_false_positives: true

  # 7. Multi-Agent Full Analysis
  multi_agent_analysis:
    name: "23-Agent Comprehensive Analysis"
    description: "Run full multi-agent system analysis"
    priority: critical
    estimated_duration_minutes: 30
    steps:
      - action: orchestrate_analysis
        command: multi-agent-optimize
        options: [--mode=hybrid, --agents=all, --orchestrate]

      - action: collect_recommendations
        metrics: [agent_findings, optimization_suggestions, security_issues]

      - action: implement_high_priority
        command: multi-agent-optimize
        options: [--implement, --focus=quality]

      - action: validate_changes
        command: run-all-tests
        options: [--scope=all, --coverage]

    success_criteria:
      all_agents_successful: true
      recommendations_generated: "> 10"
      high_priority_implemented: true

  # 8. End-to-End Development Workflow
  end_to_end_workflow:
    name: "Complete Development Cycle"
    description: "Simulate full development workflow"
    priority: critical
    estimated_duration_minutes: 45
    steps:
      - action: analyze_codebase
        command: explain-code
        options: [--level=advanced]

      - action: optimize_performance
        command: optimize
        options: [--implement, --category=all]

      - action: generate_tests
        command: generate-tests
        options: [--type=all, --coverage=80]

      - action: run_tests
        command: run-all-tests
        options: [--scope=all, --coverage, --profile]

      - action: cleanup_code
        command: clean-codebase
        options: [--imports, --dead-code]

      - action: check_quality
        command: check-code-quality
        options: [--auto-fix, --language=auto]

      - action: generate_docs
        command: update-docs
        options: [--type=all, --format=markdown]

      - action: final_validation
        command: run-all-tests
        options: [--scope=all, --coverage]

    success_criteria:
      all_steps_successful: true
      quality_improved: ">= 30"
      coverage: ">= 80"
      performance_improved: ">= 1.5x"

  # 9. CI/CD Pipeline Setup
  cicd_setup:
    name: "CI/CD Pipeline Configuration"
    description: "Setup and validate CI/CD pipeline"
    priority: high
    estimated_duration_minutes: 20
    steps:
      - action: setup_github_actions
        command: ci-setup
        options: [--platform=github, --type=basic]

      - action: add_security_scanning
        command: ci-setup
        options: [--security]

      - action: add_monitoring
        command: ci-setup
        options: [--monitoring]

      - action: validate_pipeline
        command: run-all-tests
        options: [--scope=all]

    success_criteria:
      pipeline_created: true
      security_enabled: true
      monitoring_enabled: true

  # 10. Security and Bug Fixing
  security_bug_fixing:
    name: "Security Analysis and Bug Fixing"
    description: "Find and fix security issues and bugs"
    priority: critical
    estimated_duration_minutes: 25
    steps:
      - action: security_scan
        command: check-code-quality
        options: [--analysis=scientific]

      - action: debug_issues
        command: debug
        options: [--auto-fix, --report]

      - action: validate_fixes
        command: run-all-tests
        options: [--scope=all]

      - action: verify_security
        command: check-code-quality
        options: [--language=auto]

    success_criteria:
      security_issues_fixed: ">= 90"
      tests_pass: true
      no_new_vulnerabilities: true

  # 11. Large-Scale Refactoring
  large_scale_refactoring:
    name: "Enterprise-Scale Refactoring"
    description: "Refactor large codebases safely"
    priority: high
    estimated_duration_minutes: 40
    steps:
      - action: analyze_architecture
        command: explain-code
        options: [--level=expert]

      - action: plan_refactoring
        command: think-ultra
        options: [--depth=comprehensive]

      - action: execute_refactoring
        command: refactor-clean
        options: [--scope=project, --implement]

      - action: validate_comprehensive
        command: double-check
        options: [--deep-analysis, --auto-complete]

      - action: test_everything
        command: run-all-tests
        options: [--scope=all, --coverage, --profile]

    success_criteria:
      refactoring_complete: true
      tests_pass: true
      performance_maintained: true
      quality_improved: ">= 25"

  # 12. Code Migration
  code_migration:
    name: "Code Migration and Modernization"
    description: "Migrate code to modern patterns"
    priority: medium
    estimated_duration_minutes: 35
    steps:
      - action: analyze_current_code
        command: explain-code
        options: [--level=expert]

      - action: identify_patterns
        command: multi-agent-optimize
        options: [--mode=review, --focus=architecture]

      - action: modernize_code
        command: refactor-clean
        options: [--patterns=modern, --implement]

      - action: update_tests
        command: generate-tests
        options: [--type=all]

      - action: validate_migration
        command: run-all-tests
        options: [--scope=all, --coverage]

    success_criteria:
      migration_complete: true
      backward_compatible: true
      tests_pass: true

# Scenario execution configuration
execution_config:
  parallel_scenarios: 2  # Run 2 scenarios in parallel
  timeout_multiplier: 1.5  # Allow 1.5x estimated time
  retry_on_failure: true
  retry_count: 1
  collect_detailed_logs: true
  capture_performance_metrics: true

# Success thresholds (global)
global_success_criteria:
  minimum_scenarios_passed: 10  # At least 10/12 scenarios must pass
  critical_scenarios_passed: 100  # All critical scenarios must pass (%)
  average_quality_improvement: 25  # Average 25% quality improvement
  average_performance_improvement: 150  # Average 1.5x performance
  zero_regressions: true
  test_pass_rate: 95  # 95% of tests must pass